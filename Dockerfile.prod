# Dockerfile pour la production
FROM php:8.2-fpm-alpine

# Installer les dépendances système
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    oniguruma-dev \
    libxml2-dev \
    libzip-dev \
    zip \
    unzip \
    freetype-dev \
    libjpeg-turbo-dev \
    libmcrypt-dev \
    gd \
    jpegoptim \
    optipng \
    pngquant \
    gifsicle \
    nodejs \
    npm

# Installer les extensions PHP
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd \
    && docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath zip opcache

# Configuration OPcache pour la production
RUN echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.memory_consumption=256" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.interned_strings_buffer=16" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.max_accelerated_files=10000" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.revalidate_freq=0" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.validate_timestamps=0" >> /usr/local/etc/php/conf.d/opcache.ini

# Installer Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Créer un utilisateur non-root
RUN addgroup -g 1000 www && adduser -u 1000 -G www -s /bin/sh -D www

# Copier les fichiers de l'application
COPY --chown=www:www . /var/www

# Passer à l'utilisateur www
USER www

# Définir le répertoire de travail
WORKDIR /var/www

# Installer les dépendances
RUN composer install --no-dev --optimize-autoloader --no-interaction \
    && npm install --production \
    && npm run build \
    && rm -rf node_modules

# Exposer le port
EXPOSE 9000

# Script de démarrage pour la production
COPY docker/php/start-prod.sh /usr/local/bin/start-prod.sh
USER root
RUN chmod +x /usr/local/bin/start-prod.sh
USER www

CMD ["/usr/local/bin/start-prod.sh"]
